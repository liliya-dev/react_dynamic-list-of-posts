{"version":3,"sources":["api.js","ButtonLoading.tsx","Comment.tsx","Post.tsx","PostsList.tsx","DynamicPostsApp.tsx","App.tsx","index.tsx"],"names":["getPosts","a","fetch","then","response","json","data","getUsers","getComments","ButtonLoading","handleSetIsLoading","loadFromServer","findComments","id","comments","filter","comment","postId","users","posts","findAuthor","userId","person","find","user","address","Object","entries","slice","map","option","join","name","email","preparedPosts","post","author","className","onClick","type","Comment","key","body","href","Post","uuid","title","PostsList","DynamicPostsApp","useState","isLoading","setIsLoading","isFetched","setIsFetched","inputValue","setInputValue","postsList","setPostsList","filteredList","setFilteredList","state","list","placeholder","value","onChange","event","currentTarget","filtered","includes","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6ca20745.chunk.js","sourcesContent":["const URLPosts = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api/posts.json';\nconst URLUsers = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api/users.json';\nconst URLComments = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api/comments.json';\n\nexport const getPosts = async () => {\n  const data = await fetch(URLPosts)\n    .then(response => response.json());\n\n  return data;\n};\n\nexport const getUsers = async () => {\n  const data = await fetch(URLUsers)\n    .then(response => response.json());\n\n  return data;\n};\n\nexport const getComments = async () => {\n  const data = await fetch(URLComments)\n    .then(response => response.json());\n\n  return data;\n};\n","/* eslint-disable no-console */\nimport React from 'react';\nimport { getUsers, getPosts, getComments } from './api';\nimport {\n  commentsType, postsType, usersType, preparedPostsType, handleLoadingType,\n} from './interfaces';\n\nexport const ButtonLoading: React.FC<handleLoadingType> = ({ handleSetIsLoading }) => {\n  const loadFromServer = async () => {\n    handleSetIsLoading('isLoadingNow', []);\n    const users: usersType[] = await getUsers();\n    const posts: postsType[] = await getPosts();\n    const comments: commentsType[] = await getComments();\n\n    const findAuthor = (userId: number) => {\n      const person: usersType | undefined = users.find(user => user.id === userId);\n\n      if (person) {\n        const address = Object.entries(person.address)\n          .slice(0, 4)\n          .map(option => option.join(' : '))\n          .join(', ');\n\n        return [person.name, person.email, address];\n      }\n\n      return [];\n    };\n\n    function findComments(id: number) {\n      return comments.filter(comment => comment.postId === id);\n    }\n\n    const preparedPosts: preparedPostsType[] = posts.map((post) => {\n      const [author, email, address] = findAuthor(post.userId);\n\n      return {\n        ...post,\n        author,\n        email,\n        address,\n        comments: findComments(post.id),\n      };\n    });\n\n    handleSetIsLoading('completed', preparedPosts);\n  };\n\n  return (\n    <button className=\"btn btn-info ml\" onClick={loadFromServer} type=\"button\">Load posts</button>\n  );\n};\n","import React from 'react';\nimport { commentType } from './interfaces';\n\nexport const Comment: React.FC<commentType> = ({ comment }) => {\n  return (\n    <li className=\"comment\" key={comment.id}>\n      <p>{comment.name}</p>\n      <p className=\"comment__body\">{comment.body}</p>\n      <a className=\"mail\" href=\"mailto:1111@mail.ru\">{comment.email}</a>\n    </li>\n  );\n};\n","/* eslint-disable no-console */\nimport React from 'react';\nimport { uuid } from 'uuidv4';\nimport { postType } from './interfaces';\nimport { Comment } from './Comment';\n\nexport const Post: React.FC<postType> = ({ post }) => {\n  return (\n    <li key={uuid()} className=\"post shadow-lg p-3 mb-5 bg-white font-italic\">\n      <h4 className=\"post__title\">{post.title}</h4>\n      <p>{post.body}</p>\n      <div className=\"wrapper\">\n        <div className=\"box-l\">\n          <p className=\"post__title\">\n            Post by\n            &nbsp;\n            {post.author}\n          </p>\n        </div>\n        <div className=\"box-r\">\n          <a className=\"mail\" href=\"mailto:1111@mail.ru\">\n            Email:\n            &nbsp;\n            {post.email}\n          </a>\n          <p>\n            Address\n            &nbsp;\n            {post.address}\n          </p>\n        </div>\n      </div>\n      <ul>\n        {\n          post.comments.map(comment => <Comment comment={comment} />)\n        }\n      </ul>\n    </li>\n  );\n};\n","/* eslint-disable no-console */\nimport React from 'react';\nimport { postsListType } from './interfaces';\nimport { Post } from './Post';\n\nexport const PostsList: React.FC<postsListType> = ({ posts }) => {\n  return (\n    <ul className=\"posts\">\n      {\n        posts.map(post => <Post post={post} />)\n      }\n    </ul>\n  );\n};\n","import React, { useState } from 'react';\nimport { ButtonLoading } from './ButtonLoading';\nimport { preparedPostsType } from './interfaces';\nimport { PostsList } from './PostsList';\n\nexport const DynamicPostsApp: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [isFetched, setIsFetched] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n  const [postsList, setPostsList] = useState<preparedPostsType[]>([]);\n  const [filteredList, setFilteredList] = useState<preparedPostsType[]>([]);\n  const handleSetIsLoading = (state: string, list: preparedPostsType[]) => {\n    if (state === 'isLoadingNow') {\n      setIsLoading(true);\n    } else {\n      setIsFetched(true);\n      setIsLoading(false);\n      setPostsList(list);\n      setFilteredList(list);\n    }\n  };\n\n  const filterPosts = (event: React.FormEvent<HTMLInputElement>) => {\n    const { value } = event.currentTarget;\n\n    setInputValue(value);\n    const filtered = postsList.filter(post => post.title.includes(value)\n      || post.body.includes(value));\n\n    setFilteredList(filtered);\n  };\n\n  return (\n    <>\n      {\n        !isLoading && !isFetched\n          ? <ButtonLoading handleSetIsLoading={handleSetIsLoading} />\n          : <></>\n      }\n      {\n        isLoading && !isFetched\n          ? <p className=\"ml mail\">Loading ...</p>\n          : <></>\n      }\n      {\n        !isLoading && isFetched\n          ? (\n            <>\n              <div className=\"input-field col s12\">\n                <input\n                  className=\"input validate\"\n                  id=\"text\"\n                  placeholder=\"Search\"\n                  type=\"text\"\n                  value={inputValue}\n                  onChange={filterPosts}\n                />\n              </div>\n\n              <PostsList posts={filteredList} />\n            </>\n          )\n          : <></>\n      }\n    </>\n  );\n};\n","/* eslint-disable no-console */\nimport React from 'react';\nimport './App.css';\nimport { DynamicPostsApp } from './DynamicPostsApp';\n\nconst App: React.FC = () => {\n  return (\n    <section>\n      <DynamicPostsApp />\n    </section>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}